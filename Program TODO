ПРОГРАММНЫЕ ОПТИМИЗАЦИИ, ФУНКЦИИ
	- Если эту стадию распознавания Вы покажете хотя бы для нескольких наиболее известных языков программирования, то далкее Вы уже показываете обработку их запуска для какого-то ОДНОГО или двух языков, которые Вам наиболее знакомы. Естественно, на тестирующем компьютере предусматривается постоянное наличие или развертывание необходимых IDE-сред. Можно подключать компиляторы к VS или использовать виртуальные машины. ВСЕ языки показывать Вам не надо, надо лишь дать примеры только для нескольких, наиболее Вам удобных.
	- Ограничения системы относительно
		bin и input code в одном месте
 		компилятор не должен запускать на выполнение скомпилированную программу (?)

 	- Выбор варианта
 	- Выводить в файл тест, который не прошел.
	- Lab 3, 4, 5, 6
	- Если выбран файл компилятора не .py/.exe, выводить имя языка в UI и все.
	- Эталонный компилятор DLL
	- Доделать. Парсинг файла результата.
	- Оценки в файл.
	- Кирилица в интерфейсе
	- Поле выбора файла асм кода в UI.
	- Эталонный компилятор: генерация асм -> вычисления

	- Компилятор С -> asm.
	- Оптимизация: Межпроцессное взаимодействие используя пайпы, сокеты, сигналы, общая память, ивенты.
	  Message passing between processes using a pipe
	- Оптимизация. Operator overloading for output, logs, ...
	- Доделать. Интерфейс
	- Оптимизация. String interning.
	- Запускается ли сгенерированный асм автоматически?
	- Ручной ввод программы для проверки
	- Ручной ввод теста
	- Оптимизация. Генерация рандомного выражения один раз, не в каждом тесте
	- Оптимизация. 0 tabs == 0 spaces
	- Оптимизация. flags inside types (int == 4 butes -> 32 flags in one int)
	- Взять правила отсюда https://github.com/nlsandler/write_a_c_compiler